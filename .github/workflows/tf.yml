name: terraform

on: pull_request

env:
  TF_VERSION: 0.12.26

jobs:
  terraform:
    strategy:
      matrix:
        workspace: [staging]

    name: ${{ matrix.workspace }}
    runs-on: ubuntu-latest

    env:
      WORKSPACE: ${{ matrix.workspace }}

    steps:
      - name: Generate tfvars Path 
        id: tfvars
        run: |
            echo "::set-output name=tfvars_file::tfvars/${WORKSPACE}.tfvars"
      - name: Checkout
        uses: actions/checkout@1.0.0
        with:
          submodules: 'false'

      - name: Setup GCP Credentials
        run: |
          # Setup the credentials in the workspace because everything in terraform is
          # driven off profiles
          pip3 install --upgrade pip setuptools
          pip3 install ansible-vault
          echo "${{ secrets.SERVICEACCOUNT }}" > secret.txt
          ansible-vault decrypt serviceaccount.json --vault-password-file secret.txt
          gcloud auth activate-service-account terraform@${{ secrets.GCP_PROJECT }}.iam.gserviceaccount.com --key-file=serviceaccount.json --project=${{ secrets.GCP_PROJECT }}
          sed "s/USER/${{ secrets.GCP_USER }}/g" -i kubernetes/argocd-perms.yaml
          sed "s/PROJECT/${{ secrets.GCP_PROJECT }}/g" -i kubernetes/argocd-perms.yaml
          sed "s/CLF_EMAIL/${{ secrets.CLOUDFLARE_EMAIL }}/g" -i kubernetes/external_dns.yaml
          sed "s/CLF_API_TOKEN/${{ secrets.CLOUDFLARE_API_TOKEN }}/g" -i kubernetes/external_dns.yaml

      - name: Terraform Format
        uses: autotune/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.TF_VERSION }}
          tf_actions_subcommand: fmt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}

      - name: Terraform Init
        uses: autotune/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.TF_VERSION }}
          tf_actions_subcommand: init
          args: --backend-config=backend/backend.tf -backend-config backend/backend.tfvars
        env:
          TF_WORKSPACE: ${{ env.WORKSPACE }}
          TF_project: ${{ secrets.GCP_PROJECT }}
          GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}

      - name: Terraform Validate
        uses: autotune/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.TF_VERSION }}
          tf_actions_subcommand: validate
        env:
          TF_WORKSPACE: ${{ env.WORKSPACE }}
          GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}
          TF_project: ${{ secrets.GCP_PROJECT }}

      - name: Terraform Plan
        id: terraform-plan
        uses: autotune/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.TF_VERSION }}
          tf_actions_subcommand: plan
          args: -var-file backend/backend.tfvars -var-file ${{ steps.tfvars.outputs.tfvars_file }}
        env:
          TF_WORKSPACE: ${{ env.WORKSPACE }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GOOGLE_APPLICATION_CREDENTIALS: "serviceaccount.json"
          TF_cf_email: ${{ secrets.CLOUDFLARE_EMAIL }}
          TF_cf_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_project: ${{ secrets.GCP_PROJECT }}

      - name: Terraform Apply
        id: terraform-apply
        uses: autotune/terraform-github-actions@master
        with:
          tf_actions_version: ${{ env.TF_VERSION }}
          tf_actions_subcommand: apply
          args: -var-file backend/backend.tfvars -var-file ${{ steps.tfvars.outputs.tfvars_file }}
        env:
          TF_WORKSPACE: ${{ env.WORKSPACE }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GOOGLE_APPLICATION_CREDENTIALS: "serviceaccount.json"
          TF_cf_email: ${{ secrets.CLOUDFLARE_EMAIL }}
          TF_cf_api_token: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_project: ${{ secrets.GCP_PROJECT }}

      - name: Install ArgoCD
        run: |
                gcloud container clusters get-credentials resume --region=us-west1 
                kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v0.15.1/cert-manager.yaml
                kubectl apply -f kubernetes/argocd-perms.yaml
                kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
                kubectl apply -f kubernetes/
                kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
                while [ "$(kubectl get svc argocd-server -nargocd|awk '{print $4}'|tail -1)" == "<pending>" ]; do
                    echo -n '.';
                    sleep 1;
                done

  docker:
    strategy:
      matrix:
        workspace: [docker]

    
    name: ${{ matrix.workspace }}
    runs-on: ubuntu-latest

    env:
      WORKSPACE: ${{ matrix.workspace }}

    steps:
      - name: Echo hello world
        run: |
          # driven off profiles
          echo "hello world"
